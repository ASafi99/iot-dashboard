[{"/Users/SAMEERMAC/Desktop/iot-dashboard/src/index.js":"1","/Users/SAMEERMAC/Desktop/iot-dashboard/src/App.js":"2","/Users/SAMEERMAC/Desktop/iot-dashboard/src/reportWebVitals.js":"3","/Users/SAMEERMAC/Desktop/iot-dashboard/src/Header.js":"4","/Users/SAMEERMAC/Desktop/iot-dashboard/src/NavBar.js":"5","/Users/SAMEERMAC/Desktop/iot-dashboard/src/Dashboard.js":"6","/Users/SAMEERMAC/Desktop/iot-dashboard/src/fire.js":"7","/Users/SAMEERMAC/Desktop/iot-dashboard/src/Devices.js":"8","/Users/SAMEERMAC/Desktop/iot-dashboard/src/Modal.js":"9","/Users/SAMEERMAC/Desktop/iot-dashboard/src/User.js":"10","/Users/SAMEERMAC/Desktop/iot-dashboard/src/Login.js":"11","/Users/SAMEERMAC/Desktop/iot-dashboard/src/SimpleCard.js":"12","/Users/SAMEERMAC/Desktop/iot-dashboard/src/widgets.js":"13","/Users/SAMEERMAC/Desktop/iot-dashboard/src/ButtonLoader.js":"14","/Users/SAMEERMAC/Desktop/iot-dashboard/src/Card.js":"15","/Users/SAMEERMAC/Desktop/iot-dashboard/src/Users.js":"16","/Users/SAMEERMAC/Desktop/iot-dashboard/src/DeviceUsers.js":"17"},{"size":615,"mtime":1609269131194,"results":"18","hashOfConfig":"19"},{"size":256,"mtime":1610119246134,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1608674423807,"results":"21","hashOfConfig":"19"},{"size":2158,"mtime":1611710402899,"results":"22","hashOfConfig":"19"},{"size":3555,"mtime":1613053469979,"results":"23","hashOfConfig":"19"},{"size":5087,"mtime":1613077775897,"results":"24","hashOfConfig":"19"},{"size":1249,"mtime":1611853947778,"results":"25","hashOfConfig":"19"},{"size":4720,"mtime":1612635597270,"results":"26","hashOfConfig":"19"},{"size":25349,"mtime":1612752314328,"results":"27","hashOfConfig":"19"},{"size":2983,"mtime":1612286384756,"results":"28","hashOfConfig":"19"},{"size":1966,"mtime":1611087327997,"results":"29","hashOfConfig":"19"},{"size":3632,"mtime":1612641732181,"results":"30","hashOfConfig":"19"},{"size":6536,"mtime":1612643784714,"results":"31","hashOfConfig":"19"},{"size":805,"mtime":1611087124654,"results":"32","hashOfConfig":"19"},{"size":3982,"mtime":1613077875013,"results":"33","hashOfConfig":"19"},{"size":4680,"mtime":1612291294169,"results":"34","hashOfConfig":"19"},{"size":4454,"mtime":1612554025069,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"xpvirq",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"39"},"/Users/SAMEERMAC/Desktop/iot-dashboard/src/index.js",["79"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport User from \"./User\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <User />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();",["80","81"],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/App.js",[],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/reportWebVitals.js",[],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/Header.js",[],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/NavBar.js",["82","83","84"],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/Dashboard.js",["85","86","87","88","89"],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/fire.js",[],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/Devices.js",["90","91","92"],"import React, { useState, useEffect } from 'react';\nimport { Button, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Modal } from './Modal';\nimport {fire} from './fire';\nimport Card from './SimpleCard'\nimport {Grid} from \"@material-ui/core\";\nimport Widget from './widgets.js'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeviceUsers from './DeviceUsers'\n\nconst title = {\n\n    right: \"500px\",\n    marginTop: \"-150px\",\n    position: \"absolute\",\n    textAlign: \"center\",\n    top: \"50%\",\n    width: \"100%\",\n    fontSize:\"30px\",\n\n\n}\n\nconst pos = {\n\n    right: \"100px\",\n    marginTop: \"140px\",\n    position: \"absolute\",\n    width: \"10%\",\n    height: \"8%\",\n}\n\nfunction Devices (){ \n        \n    const [showModal, setShowModal] = useState(false);\n    const [showDevices, setDevices] = useState([])\n    const [showPage, setPage] = useState (true)\n    const [showUserPage, setUserPage] = useState (false)\n    const [currentDevice, setCurrentDevice] = useState(\"\")\n    const [accountType, setAccountType] = useState (\"\")\n    const [test, setTest] = useState([])\n\n    //const [created, setCreated] = useState([])\n   \n    const page = (childData) => {\n        setPage(childData)\n        setUserPage(childData)\n  }\n\n  const page1 = (childData) => {\n    \n    setUserPage(childData)\n}\n\n\n\n\n  const device = (childData) => {\n    setCurrentDevice(childData)\n    \n}\n\n\n  \n\n    useEffect(() => {   \n\n        fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function(doc) {\n        \n            let accountType = doc.data().userInfo.accountType;\n            let docRef\n\n            setAccountType(accountType)\n            if(accountType=== \"IoT Owner\" || accountType === \"IoT User\"){\n\n              let ref = doc.data().userInfo.ref;\n               docRef = fire.firestore().collection(\"users\").doc(ref)\n               \n            } else{\n              docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n\n            }\n        \n     /* Create reference to messages in Firebase Database */\n        \n         docRef.onSnapshot((doc) => {\n        // devices.push(doc.data())\n         setDevices([doc.data().devices]); \n\n         //setTest([doc.data().devices])\n         \n    })  \n\n        })\n    \n        \n    },[currentDevice])\n\n\n        let deviceCards = showDevices.map((data, i) =>\n         \n            Object.values(data).map((d) =>{\n\n              //console.log(d.users.includes(fire.auth().currentUser.email))\n              \n              if(d.users.includes(fire.auth().currentUser.email)){\n              \n              return(\n              \n    <Grid item xs={3} >\n      <Card key = {i} device = {d.deviceInfo.deviceName} showPage = {page} showUserPage= {page1} currentDevice = {device} /> \n    </Grid>\n            \n            )}}))\n            \n          \n\n    const useStyles = makeStyles({\n      gridContainer: {\n        \n        margin:0,\n       marginTop: 150 ,\n       position: \"absolute\",\n       width:\"inherit\",\n       zIndex:-10,\n       minWidth:1200\n       \n      }\n    });\n\n    const openModal = () => {\n      setShowModal(prev => !prev);\n\n    }\n\n    const classes = useStyles();\n\n       return(\n        <>\n        {showPage ? (          \n             <>           \n            <h2 style = {title} >Devices </h2>\n\n            {accountType === \"IoT Owner\" || accountType === \"IoT User\" ? (\n           <OverlayTrigger placement=\"bottom\" overlay={<Tooltip id=\"tooltip-disabled\">Only IoT Admin are able to add devices!</Tooltip>}>\n           <span className=\"d-inline-block\" style = {{position: \"absolute\", right: \"100px\",\n    marginTop: \"140px\"}}>\n           <Button disabled variant=\"primary\" style = {{pointerEvents: 'none'}}>\n               Add device\n             </Button>\n           </span>\n         </OverlayTrigger>\n            ) :(\n            <Button onClick={openModal} variant=\"primary\" style = {pos}>Add device</Button>\n            )}\n             <Modal showModal={showModal} setShowModal={setShowModal} isWidget ={true} currentDevice = {currentDevice} /> \n           \n    <Grid  \n          fluid\n          container\n          className={classes.gridContainer}\n          spacing= {8}\n          direction=\"row\"\n          alignContent=\"center\"\n          alignItems=\"center\"\n          wrap=\"wrap\"\n         >\n      {deviceCards}\n    </Grid> \n            </>\n        ) : (\n          showUserPage ? ( \n            <>   \n           <DeviceUsers currentDevice = {currentDevice}/>\n           </>\n          ):(\n            <>\n            <Widget currentDevice = {currentDevice} />\n            \n            </>\n        \n        ))}\n        </>\n       )  \n    }   \n\nexport default Devices\n","/Users/SAMEERMAC/Desktop/iot-dashboard/src/Modal.js",["93"],"import React, { useRef, useEffect, useCallback, useState} from 'react';\nimport { Form, Col,  } from 'react-bootstrap';\nimport { useSpring, animated } from 'react-spring';\nimport styled from 'styled-components';\nimport { MdClose } from 'react-icons/md';\nimport { FaTemperatureHigh } from 'react-icons/fa';\nimport {fire, otherApp} from \"./fire\";\nimport { Button } from '@material-ui/core/';\nimport {IoIosSwitch} from \"react-icons/io\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport \"./User.css\";\nimport firebase from 'firebase/app'\n\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst Background = styled.div`\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 0;\n`;\n\nconst ModalWrapper = styled.div`\n  width: 700px;\n  height: 250px;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: #fff;\n  color: #000;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  position: relative;\n  z-index: 10;\n  border-radius: 10px;\n`;\n\nconst WidgetModalWrapper = styled.div`\n  width: 700px;\n  height: 460px;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: #fff;\n  color: #000;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  position: relative;\n  z-index: 10;\n  border-radius: 10px;\n`;\n\n\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  line-height: 1.8;\n  color: #141414;\n  p {\n    margin-bottom: 1rem;\n  }\n\n\n  .save {\n    padding: 10px 24px;\n    background: #141414;\n    color: #fff;\n    border: none;\n    width:100px;\n    float:left;\n    position: relative;\n    top: 20px;\n    background-color:deepskyblue;\n    border-radius: 10%;\n\n  }\n\n  .save:hover {\n    box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);\n  }\n  form{\n      position: absolute;\n      top: 20px;\n      left: 30px;\n      float:left;\n  }\n  h3{\n    float: left;\n    font-weight: bold;\n  }\n  input, label {\n    display:block;\n    float: left;\n  \n}\nselect, label {\n  display:block;\n  float: left;\n\n}\n\n.test{\n  float: left;\n}\nh5{\n  float: left;\n  font-weight: bold;\n}\n  \n  \n`;\n\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  z-index: 10;\n`;\n\n\nexport const Modal = (props) => {\n  const modalRef = useRef();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [accountType, setAccountType] = useState(\"\");\n\n const { showModal, setShowModal, isWidget,obj, currentDevice, isUser, isManageUser } = props\n\n const [switchForm, setForm] = useState(false);\n const [chartForm, setChartForm] = useState(false);\n const [validated, setValidated] = useState(false);\n\n  const [deviceName, setDevice] = useState(\"\");\n  const [locationName, setLocation] = useState(\"\");\n  const [widgetName, setWidget] = useState(\"\");\n  const [datasource, setDatasource] = useState(\"\");\n  const [maxValue, setMaxValue] = useState(\"\");\n  const [unit, setUnit] = useState(\"\");\n\n  const [onText, setONText] = useState(\"\");\n  const [offText, setOFFText] = useState(\"\");\n  const [value, setValue] = useState(\"\");\n\n  const [users, setUsers] = useState([])\n\n  const [userToBeAdded, setUserToBeAdded] = useState(\"\")\n  const [userError, setUserError] = useState(\"\")\n\n\n  \n\n  useEffect(() => { \n\n    fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function (doc) {\n\n      let accountType = doc.data().userInfo.accountType;\n\n      setAccountType(accountType);\n      if (accountType === \"IoT Owner\" || accountType === \"IoT User\") {\n      }else{\n\n    let docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n   \n    docRef.onSnapshot((doc) => {\n                \n         if(Object.keys(doc.data().users).length>0){\n\n         setUsers([doc.data().users])      \n\n         }\n      })}\n    })\n  },[])\n\n  const clearErrors = () => {\n    setEmailError(\"\");\n    setPasswordError(\"\");\n  };\n\n  const clearInputs = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n\n  function handleUserAdd() {\n\n    let temps = []\n    users && users.map(users =>\n\n      Object.values(users).map((obj,i) =>\n        temps.push(obj.email)\n      ))\n\n    if (!userToBeAdded) {\n    }\n    else if((temps.includes(userToBeAdded)))\n    {\n\n      let docRef;\n\n      fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function (doc) {\n\n        let accountType = doc.data().userInfo.accountType;\n\n        setAccountType(accountType);\n        if (accountType === \"IoT Owner\") {\n\n          let ref = doc.data().userInfo.ref;\n          docRef = fire.firestore().collection(\"users\").doc(ref);\n\n        } else {\n          docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid);\n\n        }      \n\n        docRef.update({\n\n          [`devices.${currentDevice}.users`]: firebase.firestore.FieldValue.arrayUnion(userToBeAdded)\n      });\n    \n       \n      });\n      setShowModal(prev => !prev);\n\n      alert(\"You have successfully added user \"+ userToBeAdded + \" to device \" + currentDevice)\n      setUserToBeAdded(\"\")\n      setUserError(\"\")\n    }else{\n      setUserError(\"This user doesn't exist\")\n    }\n    \n  }\n\n\n  const signUpWithEmailAndPassword = () => {\n    clearErrors();\n     otherApp\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n       .then(cred => {   \n        \n          fire.firestore().collection('users').doc(cred.user.uid).set({ \n            \n            userInfo:{\n              email: email,\n              uid: cred.user.uid,\n              ref: fire.auth().currentUser.uid,\n              accountType: accountType,\n            }\n\n          })\n\n          var docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n\n          const object = {\n\n            users:{\n\n              [cred.user.uid]:{\n                email: email,\n                accountType: accountType\n              \n              }\n            }\n\n          }\n        \n         docRef.set(object, {merge:true})\n\n        setShowModal(prev => !prev)\n        alert(\"You have successfully added user: \"+ email)\n        clearInputs()\n\n        }).catch((err) => {\n          switch (err.code) {\n            case \"auth/email-already-in-use\":\n            case \"auth/invalid-email\":\n              setEmailError(err.message);\n              break;\n            case \"auth/weak-password\":\n              setPasswordError(err.message);\n              break;\n            default:\n              \n          }\n         \n        });\n    };\n       \n\n  function handleDeviceSave() {\n\n    if (!deviceName) {\n    } else {\n\n      let docRef;\n\n      fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function (doc) {\n\n        let accountType = doc.data().userInfo.accountType;\n\n        setAccountType(accountType);\n        if (accountType === \"IoT Owner\") {\n\n          let ref = doc.data().userInfo.ref;\n          docRef = fire.firestore().collection(\"users\").doc(ref);\n\n        } else {\n          docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid);\n\n        }\n        const object = {\n          devices: {\n            [deviceName]: {\n              deviceInfo: {\n                deviceName: deviceName,\n                created: new Date(),\n              },\n              widgets: {},\n\n              users: [fire.auth().currentUser.email]\n                \n              \n            }\n           \n          }\n        };\n\n        docRef.set(object, { merge: true });\n      });\n      setShowModal(prev => !prev);\n\n      alert(\"You have successfully added device: \"+ deviceName)\n      setDevice(\"\");\n    }\n  }\n\n  const submit = (event) => {\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    setValidated(true);\n  }\n\nconst handleChartWidgetSave = () => {\n\n    if(!widgetName || !datasource || !locationName ){\n\n    }else{\n\n      let docRef\n\n      fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function(doc) {\n          \n        let accountType = doc.data().userInfo.accountType;\n      \n        setAccountType(accountType)\n        if(accountType=== \"IoT Owner\"){\n  \n          let ref = doc.data().userInfo.ref;\n           docRef = fire.firestore().collection(\"users\").doc(ref)\n           \n        } else{\n          docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n  \n        }\n\n  const object = {\n      \n    devices:{\n      [currentDevice]:{\n        widgets:{\n        [widgetName]:{\n        widgetName: widgetName,\n        datasource: datasource,\n        location: locationName,\n        type: \"Chart\",\n        deviceName: currentDevice,\n      }}}\n    }\n  }\n\n        docRef.set(object, {merge:true})\n      })\n      setShowModal(prev => !prev)\n      alert(\"You have successfully added chart widget: \"+ widgetName)\n      setWidget(\"\")\n      setDatasource(\"\")\n      setLocation(\"\")\n      setValidated(false);\n          }}\n  \n  const handleSensorWidgetSave = () => {\n\n    if(!widgetName || !datasource || !locationName || !unit || !maxValue ){\n\n    }else{\n\n      let docRef\n\n      fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function(doc) {\n          \n        let accountType = doc.data().userInfo.accountType;\n      \n        setAccountType(accountType)\n        if(accountType=== \"IoT Owner\"){\n  \n          let ref = doc.data().userInfo.ref;\n           docRef = fire.firestore().collection(\"users\").doc(ref)\n           \n        } else{\n          docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n  \n        }\n\n       var rand = Math.floor(Math.random() * 101);  \n\n      \n     \n\n     const object = {\n      \n      devices:{\n        [currentDevice]:{\n          widgets:{\n          [widgetName]:{\n          widgetName: widgetName,\n          datasource: datasource,\n          location: locationName,\n          unit: unit,\n          maxValue: maxValue,\n          type: \"Sensor\",\n          value: rand,\n          deviceName: currentDevice,\n        }}}\n      }\n    }\n    \n     \n    docRef.set(object, {merge:true})\n      })\n    setShowModal(prev => !prev)\n    alert(\"You have successfully added sensor widget: \"+ widgetName)\n    setWidget(\"\")\n    setDatasource(\"\")\n    setLocation(\"\")\n    setUnit(\"\")\n    setMaxValue(\"\")\n    setValidated(false);\n    }\n  }\n\n  const handleSwitchWidgetSave = () => {\n\n\n\n    if(!widgetName || !datasource || !locationName || !onText || !offText || !value ){\n\n    }else{\n\n      let docRef\n\n      fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function(doc) {\n          \n        let accountType = doc.data().userInfo.accountType;\n      \n        setAccountType(accountType)\n        if(accountType=== \"IoT Owner\"){\n  \n          let ref = doc.data().userInfo.ref;\n           docRef = fire.firestore().collection(\"users\").doc(ref)\n           \n        } else{\n          docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n  \n        }\n\n    const object = {\n      \n      devices:{\n        [currentDevice]:{\n          widgets:{\n          [widgetName]:{\n          widgetName: widgetName,\n          datasource: datasource,\n          location: locationName,\n          value: value,\n          onText: onText,\n          offText: offText,\n          type: \"Switch\",\n          deviceName: currentDevice,\n          \n        }}}\n      }}\n      \n\n    docRef.set(object, {merge:true})\n  })\n    setShowModal(prev => !prev)\n    alert(\"You have successfully added switch widget: \"+ widgetName)\n\n    setWidget(\"\")\n    setDatasource(\"\")\n    setLocation(\"\")\n    setValue(\"\")\n    setONText(\"\")\n    setOFFText(\"\")\n\n    setValidated(false);\n    }\n  }\n  const animation = useSpring({\n    config: {\n      duration: 250,\n      zIndex:100,\n    },\n   \n    opacity: showModal ? 1 : 0,\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`\n  });\n\n  const closeModal = e => {\n    if (modalRef.current === e.target) {\n      setShowModal(false);\n    }\n  };\n\n  const keyPress = useCallback(\n    e => {\n      if (e.key === 'Escape' && showModal) {\n        setShowModal(false);\n        console.log('I pressed');\n      }\n    },\n    [setShowModal, showModal]\n  );\n\n  useEffect(\n    () => {\n\n      document.addEventListener('keydown', keyPress);\n      return () => document.removeEventListener('keydown', keyPress);\n    },\n    [keyPress]\n  );\n\n  const ColoredLine = ({ color }) => (\n    <hr\n        style={{\n            color: color,\n            backgroundColor: color,\n            top: 20,\n            position:'relative',\n            right: 20\n\n        }}\n    />\n);\n\nconst classes = useStyles();\n  \n  return (\n    <>\n    {\n    \n    isManageUser ? (\n\n      showModal ? (\n        <Background onClick={closeModal} ref={modalRef}>\n        <animated.div style={animation}>\n          <WidgetModalWrapper showModal={showModal}>\n            <ModalContent>        \n            <Form >\n              \n            <h2>Users</h2>\n\n            <Form.Group >\n              <Form.Label style={{fontSize:15}}>Search User</Form.Label>\n              <Form.Control style = {{minWidth:400}} required  placeholder=\"Search a user...\" value = {userToBeAdded} onChange={e => setUserToBeAdded(e.target.value)} />\n              <p style = {{color: \"red\", position:\"absolute\", top:125}} >{userError}</p>\n            </Form.Group>\n \n              {/* {users && users.map(users =>\n\n      Object.values(users).map((obj,i) =>(\n                <option>{obj.email}</option>\n                \n      )))} */}\n\n      \n              \n\n          <input style = {{width:200, height:70, position: \"absolute\", top: 350}} className = \"save\" type = \"button\" value =\"Add User\" onClick = {handleUserAdd} ></input>\n\n           </Form>           \n\n</ModalContent>\n<CloseModalButton\n          aria-label='Close modal'\n          onClick={() => setShowModal(prev => !prev)}\n        />\n      </WidgetModalWrapper>\n    </animated.div>\n  </Background>\n      ):null\n\n    ):(\n    \n    isUser ? (\n      showModal ? (\n       <Background onClick={closeModal} ref={modalRef}>\n       <animated.div style={animation}>\n         <WidgetModalWrapper showModal={showModal}>\n           <ModalContent>        \n           <Form >\n             \n           <h2>Add User</h2>\n\n           <Form.Group >\n              <Form.Label style={{fontSize:15}}>User Name</Form.Label>\n              <Form.Control style = {{minWidth:400}} required  placeholder=\"Enter user name\" value = {email} onChange={e => setEmail(e.target.value)} />\n              <p style = {{color: \"red\", position:\"absolute\", top:125}} >{emailError}</p>\n            </Form.Group>\n\n          <Form.Group style = {{position:\"relative\",  padding:0, margin: 0, top:30 }}>\n            <Form.Label style={{fontSize:15}} >Password</Form.Label>\n            <Form.Control required placeholder=\"Enter password\" value = {password} onChange={e => setPassword(e.target.value)}/>\n            <p style = {{color: \"red\", position:\"absolute\", top: 135}}>{passwordError}</p>\n          </Form.Group>\n\n          <Form.Group style = {{position:\"relative\",  padding:0, margin: 0, top: 50 }} >\n              <Form.Label style={{fontSize:15}}>Account type</Form.Label>\n              <Form.Control required  as = \"select\" defaultValue = \"Choose...\" onChange={e => setAccountType(e.target.value)}>\n              <option value = \"\">Choose...</option>\n                <option>IoT User</option>\n                <option>IoT Owner</option>\n                </Form.Control>\n            </Form.Group>\n\n          <input style = {{width:200, height:70, position: \"absolute\", top: 350}} className = \"save\" type = \"button\" value =\"Add User\" onClick = {signUpWithEmailAndPassword} ></input>\n\n           </Form>           \n\n</ModalContent>\n<CloseModalButton\n          aria-label='Close modal'\n          onClick={() => setShowModal(prev => !prev)}\n        />\n      </WidgetModalWrapper>\n    </animated.div>\n  </Background>\n      ):null\n    ):( \n    isWidget ? (\n    \n      showModal ? (\n        <Background onClick={closeModal} ref={modalRef}>\n          <animated.div style={animation}>\n            <ModalWrapper showModal={showModal}>\n              <ModalContent>\n              <form > \n                  <h3>Device Form</h3>\n                \n                  <div style = {{float: \"left\"}}>\n                  <label for = \"deivceName\"> Device Name </label>\n                    <input\n                    required\n                    style = {{width: \"600px\", position : \"relative\"}}\n                    //placeholder=\"Device name\"\n                    onChange={e => setDevice(e.target.value)}\n                    type= \"text\" \n                    placeholder = \"Enter device name\"\n                    name = \"deviceName\"\n                    id = \"deviceName\"\n                   />\n                  <input className = \"save\" type = \"submit\" value =\"Save\" onClick = {handleDeviceSave} ></input>\n                  </div>\n                </form>\n            \n              </ModalContent>\n              <CloseModalButton\n                aria-label='Close modal'\n                onClick={() => setShowModal(prev => !prev)}\n              />\n            </ModalWrapper>\n          </animated.div>\n        </Background>\n      ) : null\n    \n    ) :(\n\n      \n      showModal ? (\n        \n        <Background onClick={closeModal} ref={modalRef}>\n          <animated.div style={animation}>\n            <WidgetModalWrapper showModal={showModal}>\n              <ModalContent>        \n              <Form  noValidate validated={validated} onSubmit={submit} >\n                \n              <h5>Widget Form</h5>\n              {/* <span style = {{right:160, top: 20,position: \"absolute\", fontSize:10}}>Choose Widget Type:</span> */}\n              <label style = {{position :\"absolute\", top:20}}>Choose widget type</label>\n              <Button variant = \"contained\"  color= \"primary\"  className={classes.button} startIcon = {<FaTemperatureHigh/>} onClick = {()=> setForm(true)} style = {{width:100, position:\"relative\", top:40, right: 240}}>Sensor</Button>\n              <Button variant = \"contained\"  color= \"primary\"  className={classes.button} startIcon = {<IoIosSwitch/>} onClick = {()=> {setForm(false) \n                setChartForm(false)}} style = {{width:100, position:\"relative\", top:40, right: 240}}>Switch</Button>\n              <Button variant = \"contained\"  color= \"primary\"  className={classes.button} startIcon = {<FaTemperatureHigh/>} onClick = {()=> setChartForm(true)} style = {{width:100, position:\"relative\", top:40, right: 240}}>Chart</Button>\n              \n            \n                         \n              <ColoredLine color=\"lightGrey\" />\n             \n          {switchForm ? (\n           <>\n             <h5 style = {{top:15, position: \"relative\"}}>Sensor Widget</h5>\n              <br/>\n              <br/>\n              \n            <Form.Group >\n              <Form.Label style={{fontSize:15}}>Widget Name</Form.Label>\n              <Form.Control style = {{maxWidth:600}} required size ='sm' placeholder=\"Enter widget name\" onChange={e => setWidget(e.target.value)} />\n            </Form.Group>\n\n         \n\n          <Form.Group >\n            <Form.Label style={{fontSize:15}} >Data Source</Form.Label>\n            <Form.Control required size ='sm' style = {{maxWidth:600}} placeholder=\"Enter data source\" onChange={e => setDatasource(e.target.value)}/>\n          </Form.Group>\n         \n          <Form.Row style = {{float: \"left\", width:650}}>\n    \n            <Form.Group as={Col} >\n              <Form.Label style={{fontSize:15}}>Max Value</Form.Label>\n              <Form.Control required size ='sm' type = \"number\" onChange={e => setMaxValue(e.target.value)} />\n            </Form.Group>\n\n            <Form.Group as={Col} >\n              <Form.Label style={{fontSize:15}}>Unit</Form.Label>\n              <Form.Control required size ='sm' as = \"select\" defaultValue = \"Choose...\" onChange={e => setUnit(e.target.value)}>\n              <option value = \"\">Choose...</option>\n                <option>%</option>\n                <option>°C</option>\n                <option>°F</option>\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group as={Col}>\n              <Form.Label style={{fontSize:15}}>Location</Form.Label>\n              <Form.Control required  size ='sm' as=\"select\" defaultValue=\"Choose...\"onChange={e => setLocation(e.target.value)} >\n                <option value = \"\">Choose...</option>\n                <option>Bedroom</option>\n                <option>Kitchen</option>\n              </Form.Control>\n            </Form.Group>\n          </Form.Row>\n          <input  onClick= {handleSensorWidgetSave} className = \"save\" type = \"submit\" style = {{position: \"static\"}} value = \"Save\"></input>\n          \n          </>\n\n           ):(\n\n            chartForm ?(\n              <>\n              <h5 style = {{top:15, position: \"relative\"}}>Sensor Chart Widget</h5>\n              <br/>\n              <br/>\n              \n              <Form.Group >\n              <Form.Label style={{fontSize:15}}>Widget Name</Form.Label>\n              <Form.Control style = {{maxWidth:600}} required size ='sm' placeholder=\"Enter widget name\" onChange={e => setWidget(e.target.value)} />\n            </Form.Group>\n\n         \n\n          <Form.Group >\n            <Form.Label style={{fontSize:15}} >Data Source</Form.Label>\n            <Form.Control required size ='sm' style = {{maxWidth:600}} placeholder=\"Enter data source\" onChange={e => setDatasource(e.target.value)}/>\n          </Form.Group>\n         \n          <Form.Row style = {{float: \"left\", width:650}}>\n\n        <Form.Group as={Col}>\n              <Form.Label style={{fontSize:15}}>Location</Form.Label>\n              <Form.Control required  size ='sm' as=\"select\" defaultValue=\"Choose...\"onChange={e => setLocation(e.target.value)} >\n                <option value = \"\">Choose...</option>\n                <option>Bedroom</option>\n                <option>Kitchen</option>\n              </Form.Control>\n            </Form.Group>\n          </Form.Row>\n          <input  onClick= {handleChartWidgetSave} className = \"save\" type = \"submit\" style = {{position: \"static\"}} value = \"Save\"></input>\n          \n\n\n          </>\n            ):(\n\n             <>\n              <h5 style = {{top:15, position: \"relative\"}}>Switch Widget</h5>\n              <br/>\n              <br/>\n            <Form.Group style={{maxWidth:600}} >\n              <Form.Label style={{fontSize:15}}>Widget Name</Form.Label>\n              <Form.Control   required size ='sm' placeholder=\"Enter widget name\" onChange={e => setWidget(e.target.value)} />\n            </Form.Group>\n    \n            <Form.Row style={{float: \"left\"}}>\n          <Form.Group>\n            <Form.Label style={{fontSize:15}} >Data Source</Form.Label>\n            <Form.Control required size ='sm' placeholder=\"Enter data source\" onChange={e => setDatasource(e.target.value)}/>\n          </Form.Group>\n\n          <Form.Group as={Col} >\n              <Form.Label style={{fontSize:15}}>Initial Value</Form.Label>\n              <Form.Control required size ='sm' as = \"select\" defaultVlaue = \"Choose...\"  onChange={e => setValue(e.target.value)} >\n              <option value = \"\">Choose...</option>\n                <option>0</option>\n                <option>1</option>\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group as={Col}>\n              <Form.Label style={{fontSize:15}}>Location</Form.Label>\n              <Form.Control required size ='sm' as=\"select\" defaultValue=\"Choose...\"onChange={e => setLocation(e.target.value)} >\n                <option value = \"\">Choose...</option>\n                <option>Bedroom</option>\n                <option>Kitchen</option>\n              </Form.Control>\n            </Form.Group>\n\n          </Form.Row>\n\n          <Form.Row style = {{position: \"relative\", bottom: 10, float: \"left\", width:600}}>\n            <Form.Group as={Col} >\n              <Form.Label style={{fontSize:15}}>ON Text</Form.Label>\n              <Form.Control required size ='sm' placeholder = \"Enter Text to display when switch is ON\" onChange={e => setONText(e.target.value)}/>\n            </Form.Group>\n\n          \n            <Form.Group as={Col} >\n              <Form.Label style={{fontSize:15}}>OFF text</Form.Label>\n              <Form.Control required size ='sm'  placeholder = \"Enter Text to display when switch is OFF\"  onChange={e => setOFFText(e.target.value)} />\n            </Form.Group>\n        \n  \n            </Form.Row>\n\n            <input  onClick= {handleSwitchWidgetSave} className = \"save\" type = \"submit\" style = {{position: \"static\",}} value = \"Save\"></input>\n          </>\n           ))}\n           \n            </Form>           \n\n      </ModalContent>\n   <CloseModalButton\n                aria-label='Close modal'\n                onClick={() => setShowModal(prev => !prev)}\n              />\n            </WidgetModalWrapper>\n          </animated.div>\n        </Background>\n      ) : null\n    \n    )))}\n    </>\n  );\n  }","/Users/SAMEERMAC/Desktop/iot-dashboard/src/User.js",["94","95","96"],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport {fire} from \"./fire\";\nimport \"./User.css\";\nimport App from \"./App\";\n\n\nfunction User() {\n  const [user, setUser] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [hasAccount, setHasAccount] = useState(false);\n\n \n\n  const clearInputs = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n\n  const clearErrors = () => {\n    setEmailError(\"\");\n    setPasswordError(\"\");\n  };\n\n  const handleLogin = () => {\n    clearErrors();\n    fire\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .catch((err) => {\n        switch (err.code) {\n          case \"auth/invalid-email\":\n          case \"auth/user-disabled\":\n          case \"auth/user-not-found\":\n            setEmailError(err.message);\n            break;\n          case \"auth/wrong-password\":\n            setPasswordError(err.message);\n            break;\n          default:\n        }\n      });\n  };\n\n  const handleSignup = () => {\n    clearErrors();\n     fire\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(cred => {   \n        \n        \n        fire.firestore().collection('users').doc(cred.user.uid).set({\n\n          \n          userInfo:{\n            email: email,\n            uid: cred.user.uid,\n            accountType: \"IoT Admin\"\n          },\n\n          devices:{\n\n          },\n          \n          users:{\n\n          },\n        })     \n      })\n      .catch((err) => {\n        switch (err.code) {\n          case \"auth/email-already-in-use\":\n          case \"auth/invalid-email\":\n            setEmailError(err.message);\n            break;\n          case \"auth/weak-password\":\n            setPasswordError(err.message);\n            break;\n          default:\n\n        }\n\n     \n      });\n  };\n\n  function handleLogOut() {\n    console.log(\"logged out\")\n    fire.auth().signOut();\n   \n  }\n\n  const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      clearInputs();\n      if (user) {\n\n        setUser(user);\n\n      } else {\n        setUser(\"\");\n      }\n    });\n  };\n\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  return (\n    <div className=\"App\">\n        \n        {user ? (\n          <>           \n              <App handleLogOut={handleLogOut} /> \n    \n          </>\n        ) : (\n          <Login\n            email={email}\n            setEmail={setEmail}\n            password={password}\n            setPassword={setPassword}\n            handleLogin={handleLogin}\n            handleSignup={handleSignup}\n            hasAccount={hasAccount}\n            setHasAccount={setHasAccount}\n            emailError={emailError}\n            passwordError={passwordError}\n          />\n        )}\n    </div>\n  );\n}\n\nexport default User;\n","/Users/SAMEERMAC/Desktop/iot-dashboard/src/Login.js",[],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/SimpleCard.js",["97"],"import {React, useEffect,useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport {fire} from './fire';\nimport { FaEye, FaTrashAlt} from 'react-icons/fa';\nimport firebase from 'firebase/app'\nimport {FiUsers} from \"react-icons/fi\"\n\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth:225,\n    marginTop: \"210px\",\n    position: \"absolute\",\n    marginLeft:\"30px\",\n    zIndex: -10,\n    maxWidth:230\n  },\n  \n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function SimpleCard(props) {\n  const classes = useStyles();\n\n const [created, setCreated] = useState(props.created)\n const [accountType, setAccountType] = useState (\"\")\n \n\n const{device} = props\n  \n  const sendData = (device) => {\n    props.showPage(false)\n\n    props.currentDevice(device)\n      \n}\n\nconst sendData1 = (device) => {\n  props.showPage(false)\n  props.showUserPage(true)\n\n  props.currentDevice(device)\n    \n}\n\n\n  useEffect(() => {\n  \n    let elements1 =[]\n\n    var options = {\n      weekday: \"short\",\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\"\n  };\n\n  fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function(doc) {\n        \n    let accountType = doc.data().userInfo.accountType;\n    let docRef\n    setAccountType(accountType)\n    if(accountType=== \"IoT Owner\" || accountType === \"IoT User\" ){\n\n      let ref = doc.data().userInfo.ref;\n       docRef = fire.firestore().collection(\"users\").doc(ref)\n    } else{\n      docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n\n    }\n    \n    docRef.get().then((doc) =>{\n\n     elements1.push(doc.data().devices[device].deviceInfo.created.toDate().toLocaleDateString('en',options).toString())\n\n     setCreated(elements1)\n     \n    })\n  })\n\n},[device])\n\n  const removeField = (device) => {\n\n  var docRef = fire.firestore().collection('users').doc(fire.auth().currentUser.uid);\n\n  docRef.update({\n\n    [`devices.${device}`]: firebase.firestore.FieldValue.delete()\n});\n\n}\n\n  \n  return (\n    <Card >\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>  \n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n       <h5 style = {{ backgroundColor:\"blue\", color:\"white\", borderRadius: \"6px\"}}>  {device} </h5>\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n        <h6>Created on: {created}</h6>\n        </Typography>\n      </CardContent>\n      <CardActions>\n      {accountType === \"IoT Owner\" || accountType === \"IoT User\" ? (\n        <>\n         <Button  onClick = {()=>{\n          sendData(device)\n            }}> {<FaEye/>}</Button>\n            <Button disabled >{<FiUsers/>}</Button>\n            <Button disabled >{<FaTrashAlt/>}</Button>\n            </>\n      ):(\n        <>\n        <Button  onClick = {()=>{\n         sendData(device)\n           }}> {<FaEye/>}</Button>\n           <Button onClick = {()=>{\n         sendData1(device)\n           }}>{<FiUsers/>}</Button>\n           <Button onClick = {() => {if(window.confirm('Are you sure you want to delete this device?'))removeField(device)}}>{<FaTrashAlt/>}</Button>\n           </>   \n      )}\n      </CardActions>\n    </Card>\n\n    \n  );\n}\n\n","/Users/SAMEERMAC/Desktop/iot-dashboard/src/widgets.js",["98","99","100","101","102","103"],"import userEvent from '@testing-library/user-event';\nimport React, { Component, useState, useEffect} from 'react';\nimport {fire, otherApp} from './fire';\nimport { Button, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport { Modal } from './Modal';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport firebase from 'firebase/app'\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 800,\n    \n  },\n});\n\n\nexport default function Widget (props) {\n\n    const [showModal, setShowModal] = useState(false);\n\n    const [obj, setObj] = useState({})\n\n    const [tempa, setTemp] = useState([]);\n\n    const {currentDevice} = props\n\n    const [isData, setData] = useState(false);\n\n    \n    const h1 = {\n        left: \"0\",\n        lineHeight: \"200px\",\n        marginTop: \"-100px\",\n        position: \"absolute\",\n        textAlign: \"center\",\n        top: \"50%\",\n        width: \"100%\",\n        opacity: \"50%\",\n        zIndex: -1\n        \n    }\n\n    const title = {\n\n        right: 400,\n        marginTop: \"-150px\",\n        position: \"fixed\",\n        textAlign: \"center\",\n        top: \"50%\",\n        width: \"100%\",\n        fontSize:\"30px\",\n    \n    }\n\n    const buttonPos = {\n\n        position: \"absolute\",\n        top:140,\n        right: 180,\n        width: \"10%\",\n        height: \"8%\",       \n         \n    }\n\n    const [accountType, setAccountType] = useState (\"\")\n\n    // const getData = () => {\n\n    //     var docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n\n    //     let temp = []\n    //     docRef.get((doc) => {\n         \n    //         temp.push(doc.data().device)\n    //         setTemp(temp); \n    //    })\n      \n  \n    \n    useEffect(() => {   \n\n        fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function(doc) {\n        \n          let accountType = doc.data().userInfo.accountType;\n          let docRef\n\n          setAccountType(accountType)\n\n          if(accountType=== \"IoT Owner\" || accountType === \"IoT User\"){\n\n            let ref = doc.data().userInfo.ref;\n             docRef = fire.firestore().collection(\"users\").doc(ref)\n          } else{\n            docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n\n          }\n\n         \n          \n        /* Create reference to messages in Firebase Database */\n\n       \n          docRef.onSnapshot((doc) => {\n\n              if(Object.keys(doc.data().devices[currentDevice].widgets).length>0){\n              \n              setTemp([doc.data().devices[currentDevice].widgets]) \n              \n              setData(true)\n\n               }else{\n               setData(false)\n              }\n\n             \n    })\n  \n   \n  })\n  \n    \n    },[])\n\n    const removeField = (widgetName) => {\n\n      fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function(doc) {\n        \n        let accountType = doc.data().userInfo.accountType;\n        let docRef\n\n        if(accountType=== \"IoT Owner\" || accountType === \"IoT User\"){\n\n      let ref = doc.data().userInfo.ref;\n             docRef = fire.firestore().collection(\"users\").doc(ref)\n          } else{\n            docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n\n          }\n     \n\n      docRef.update({\n\n        [`devices.${currentDevice}.widgets.${widgetName}`]: firebase.firestore.FieldValue.delete()\n    });\n\n  })\n}\n    \n    const openModal = () => {\n        setShowModal(prev => !prev);\n  \n      }\n      const tablePos = {\n       position: \"absolute\",\n       top: 250,\n       width:900,\n       left:180\n    }\n\n      const classes = useStyles();\n     \n    return(\n        <>\n    <h5 style = {title}>\n   Device :  <p style = {{display: \"inline\", backgroundColor:\"blue\", color:\"white\", borderRadius: \"6px\"}}>{currentDevice}</p>\n   </h5>\n   {!isData ? (\n   <h1 style = {h1}>\n            No data to display\n   </h1>\n   ): (\n    <div style = {tablePos} >\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Type</TableCell>\n            <TableCell align=\"right\">Widget Name</TableCell>\n            <TableCell align=\"right\">Current Value</TableCell>\n            <TableCell align=\"right\">Location</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n        {tempa && tempa.map(temps =>\n\n        Object.values(temps).map(obj =>(\n      \n          <TableRow key={obj.widgetName}>\n              <TableCell component=\"th\" scope=\"row\">\n                {obj.type}\n              </TableCell>\n              <TableCell align=\"right\">{obj.widgetName}</TableCell>\n              <TableCell align=\"right\">{obj.value}</TableCell>\n              <TableCell align=\"right\">{obj.location}</TableCell>\n              <TableCell align=\"right\">\n              {accountType === \"IoT User\" ? (\n                <Button disabled style = {{ pointerEvents: 'none', backgroundColor: \"red\", color: \"white\" , borderRadius: \"10px\", width: 80}} >Delete</Button>\n              ):( <Button style = {{backgroundColor: \"red\", color: \"white\" , borderRadius: \"10px\", width: 80}} onClick = {() => {if(window.confirm('Are you sure you want to Delete this widget?'))removeField(obj.widgetName)}}>Delete</Button>)\n              }\n                </TableCell>\n            </TableRow>\n          )))}\n        </TableBody>\n      </Table>\n      </TableContainer>\n      </div>\n   \n   )}\n     {accountType === \"IoT User\" ? (\n           <OverlayTrigger placement=\"bottom\" overlay={<Tooltip id=\"tooltip-disabled\">Only IoT Admin and IoT Owner are able to add widgets!</Tooltip>}>\n           <span className=\"d-inline-block\" style = {{position: \"absolute\", right: \"100px\",\n    marginTop: \"140px\"}}>\n           <Button disabled variant=\"primary\" style = {{pointerEvents: 'none'}}>\n               Add widget\n             </Button>\n           </span>\n         </OverlayTrigger>\n            ) :(\n   <Button onClick={openModal} variant=\"primary\" style = {buttonPos}>Add widget</Button>\n            )}\n   <Modal showModal={showModal} setShowModal={setShowModal} isWidget = {false} currentDevice = {currentDevice} />\n    </>\n\n    )\n}","/Users/SAMEERMAC/Desktop/iot-dashboard/src/ButtonLoader.js",[],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/Card.js",["104","105","106"],"/Users/SAMEERMAC/Desktop/iot-dashboard/src/Users.js",["107"],"import React, { Component, useState, useEffect} from 'react';\nimport { Button, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Modal } from './Modal';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {fire} from './fire';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nexport default function Users () {\n\n    const useStyles = makeStyles({\n        table: {\n          minWidth: 800,\n          \n        },\n      });\n\n    const title = {\n\n        right: \"500px\",\n        marginTop: \"-150px\",\n        position: \"absolute\",\n        textAlign: \"center\",\n        top: \"50%\",\n        width: \"100%\",\n        fontSize:\"30px\",\n    }\n\n    const pos = {\n\n        right: \"100px\",\n        marginTop: \"140px\",\n        position: \"absolute\",\n        width: \"10%\",\n        height: \"8%\",\n    }\n\n    const [showModal, setShowModal] = useState(false);\n    const [isData, setData] = useState(false);\n    const [tempa, setTemp] = useState([]);\n    const [accountType, setAccountType] = useState (\"\")\n\n\n    const openModal = () => {\n        setShowModal(prev => !prev);\n  \n      }\n\n        \n    useEffect(() => {   \n\n      fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function(doc) {\n        \n        let accountType = doc.data().userInfo.accountType;\n        \n        setAccountType(accountType)\n        if(accountType=== \"IoT Owner\" || accountType === \"IoT User\"){\n     \n       } else{\n\n        let docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n        let temps = []\n        docRef.onSnapshot((doc) => {\n           \n           \n             temps.push(doc.data().users)\n             if(Object.keys(doc.data().users).length>0){\n\n             setTemp([doc.data().users])      \n             setData(true)\n\n              }else{\n              setData(false)\n             }\n   })\n\n       }\n      })\n          \n        /* Create reference to messages in Firebase Database */\n\n    \n    }, [])\n  \n\n    const tablePos = {\n        position: \"absolute\",\n        top: 250,\n        width:900,\n        left:180,\n        zIndex: -2\n     }\n\n     const h1 = {\n        left: \"0\",\n        lineHeight: \"200px\",\n        marginTop: \"-100px\",\n        position: \"absolute\",\n        textAlign: \"center\",\n        top: \"50%\",\n        width: \"100%\",\n        opacity: \"50%\",\n        zIndex: -1\n        \n    }\n\n     const classes = useStyles();\n    return(\n        <>\n        <h2 style = {title} >Users </h2>\n\n        {accountType === \"IoT User\" || accountType === \"IoT Owner\" ? (\n           <OverlayTrigger placement=\"bottom\" overlay={<Tooltip id=\"tooltip-disabled\">Only IoT Admins are able to add users!</Tooltip>}>\n           <span className=\"d-inline-block\" style = {{position: \"absolute\", right: \"100px\",\n    marginTop: \"140px\"}}>\n           <Button disabled variant=\"primary\" style = {{pointerEvents: 'none'}}>\n               Add users\n             </Button>\n           </span>\n         </OverlayTrigger>\n            ) :(\n        <Button onClick={openModal} variant=\"primary\" style = {pos}>Add users</Button>\n            )}\n        <Modal showModal={showModal} setShowModal={setShowModal} isUser= {true} /> \n\n   {!isData ? (\n   <h1 style = {h1}>\n            No data to display\n   </h1>\n   ): (\n    <div style = {tablePos} >\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>ID</TableCell>\n            <TableCell align=\"right\">Email</TableCell>\n            <TableCell align=\"right\">Account Type</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n        {tempa && tempa.map(temps =>\n\n        Object.values(temps).map((obj,i) =>(\n      \n          <TableRow key={i}>\n              <TableCell component=\"th\" scope=\"row\">\n                {i}\n              </TableCell>\n              <TableCell align=\"right\">{obj.email}</TableCell>\n              <TableCell align=\"right\">{obj.accountType}</TableCell>\n              <TableCell align=\"right\">\n                <button style = {{backgroundColor: \"red\", color: \"white\" , borderRadius: \"10px\", width: 80}} >Delete</button>\n                </TableCell>\n            </TableRow>\n          )))}\n        </TableBody>\n      </Table>\n      </TableContainer>\n      </div>\n   )}\n        </>\n    )\n}","/Users/SAMEERMAC/Desktop/iot-dashboard/src/DeviceUsers.js",["108","109","110","111","112","113"],"import React, { Component, useState, useEffect} from 'react';\nimport { Modal } from './Modal';\nimport { Button, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {fire, otherApp} from './fire';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport firebase from 'firebase/app'\n\nexport default function DeviceUsers (props) {\n\n    const [showModal, setShowModal] = useState(false);\n    const [accountType, setAccountType] = useState (\"\")\n    const [tempa, setTemp] = useState([]);\n    const [isData, setData] = useState(false);\n\n    const { currentDevice } = props\n\n    const tablePos = {\n        position: \"absolute\",\n        top: 250,\n        width:900,\n        left:180,\n        zIndex: -2\n     }\n\n    const title = {\n\n        right: \"500px\",\n        marginTop: \"-150px\",\n        position: \"absolute\",\n        textAlign: \"center\",\n        top: \"50%\",\n        width: \"100%\",\n        fontSize:\"30px\",\n    \n    \n    }\n\n    const buttonPos = {\n\n        position: \"absolute\",\n        top:140,\n        right: 180,\n        width: \"10%\",\n        height: \"8%\",       \n         \n    }\n\n    const h1 = {\n        left: \"0\",\n        lineHeight: \"200px\",\n        marginTop: \"-100px\",\n        position: \"absolute\",\n        textAlign: \"center\",\n        top: \"50%\",\n        width: \"100%\",\n        opacity: \"50%\",\n        zIndex: -1\n        \n    }\n    const openModal = () => {\n        setShowModal(prev => !prev);\n  \n      }\n\n      useEffect(() => {   \n\n        fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid).get().then(function(doc) {\n          \n          let accountType = doc.data().userInfo.accountType;\n          \n          setAccountType(accountType)\n          if(accountType=== \"IoT Owner\" || accountType === \"IoT User\"){\n       \n         } else{\n  \n          let docRef = fire.firestore().collection(\"users\").doc(fire.auth().currentUser.uid)\n         // let temps = []\n          docRef.onSnapshot((doc) => {\n             \n               if(Object.keys(doc.data().users).length>0){\n  \n               setTemp([doc.data().devices[currentDevice].users])      \n               setData(true)\n  \n                }else{\n                setData(false)\n               }\n     })\n  \n         }\n        })\n            \n          /* Create reference to messages in Firebase Database */\n  \n      \n      }, [])\n\n      const removeField = (userName) => {\n\n        var docRef = fire.firestore().collection('users').doc(fire.auth().currentUser.uid);\n  \n        docRef.update({\n  \n            [`devices.${currentDevice}.users`]: firebase.firestore.FieldValue.arrayRemove(userName)\n      });\n  \n    }\n\n    return(\n        <>\n        <h5 style = {title}>\n        Device: <p style = {{display: \"inline\", backgroundColor:\"blue\", color:\"white\", borderRadius: \"6px\"}}>{props.currentDevice}</p>\n        </h5>\n\n    <Button onClick={openModal} variant=\"primary\" style = {buttonPos} >Add User</Button>\n    <Modal showModal={showModal} setShowModal={setShowModal} isManageUser = {true} currentDevice = {props.currentDevice} />\n    {!isData ? (\n   <h1 style = {h1}>\n            No data to display\n   </h1>\n   ): (\n    <div style = {tablePos} >\n    <TableContainer component={Paper}>\n      <Table  aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>ID</TableCell>\n            <TableCell align=\"right\">Email</TableCell>\n           \n          </TableRow>\n        </TableHead>\n        <TableBody>\n        {tempa && tempa.map(temps =>\n\n        Object.values(temps).map((obj,i) =>(\n      \n          <TableRow key={i}>\n              <TableCell component=\"th\" scope=\"row\">\n                {i}\n              </TableCell>\n              <TableCell align=\"right\">{obj}</TableCell>\n              <TableCell align=\"right\">\n                <button style = {{backgroundColor: \"red\", color: \"white\" , borderRadius: \"10px\", width: 80}} onClick = {() => {if(window.confirm('Are you sure you want to Delete this user from the device?'))removeField(obj)}} >Delete</button>\n                </TableCell>\n            </TableRow>\n          )))}\n        </TableBody>\n      </Table>\n      </TableContainer>\n      </div>\n   )}\n</>\n    )\n}",{"ruleId":"114","severity":1,"message":"115","line":4,"column":8,"nodeType":"116","messageId":"117","endLine":4,"endColumn":11},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"114","severity":1,"message":"122","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":14},{"ruleId":"114","severity":1,"message":"123","line":3,"column":17,"nodeType":"116","messageId":"117","endLine":3,"endColumn":30},{"ruleId":"114","severity":1,"message":"124","line":3,"column":39,"nodeType":"116","messageId":"117","endLine":3,"endColumn":45},{"ruleId":"114","severity":1,"message":"125","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"126","line":12,"column":12,"nodeType":"116","messageId":"117","endLine":12,"endColumn":16},{"ruleId":"127","severity":1,"message":"128","line":107,"column":39,"nodeType":"129","messageId":"130","endLine":107,"endColumn":41},{"ruleId":"131","severity":1,"message":"132","line":143,"column":12,"nodeType":"133","endLine":143,"endColumn":14,"suggestions":"134"},{"ruleId":"114","severity":1,"message":"135","line":145,"column":18,"nodeType":"116","messageId":"117","endLine":145,"endColumn":30},{"ruleId":"114","severity":1,"message":"136","line":42,"column":12,"nodeType":"116","messageId":"117","endLine":42,"endColumn":16},{"ruleId":"114","severity":1,"message":"137","line":42,"column":18,"nodeType":"116","messageId":"117","endLine":42,"endColumn":25},{"ruleId":"127","severity":1,"message":"138","line":103,"column":41,"nodeType":"129","messageId":"139","endLine":103,"endColumn":43},{"ruleId":"114","severity":1,"message":"140","line":141,"column":44,"nodeType":"116","messageId":"117","endLine":141,"endColumn":47},{"ruleId":"114","severity":1,"message":"141","line":2,"column":27,"nodeType":"116","messageId":"117","endLine":2,"endColumn":33},{"ruleId":"114","severity":1,"message":"142","line":2,"column":35,"nodeType":"116","messageId":"117","endLine":2,"endColumn":40},{"ruleId":"131","severity":1,"message":"143","line":113,"column":6,"nodeType":"133","endLine":113,"endColumn":8,"suggestions":"144"},{"ruleId":"114","severity":1,"message":"145","line":8,"column":8,"nodeType":"116","messageId":"117","endLine":8,"endColumn":14},{"ruleId":"114","severity":1,"message":"146","line":1,"column":8,"nodeType":"116","messageId":"117","endLine":1,"endColumn":17},{"ruleId":"114","severity":1,"message":"125","line":2,"column":17,"nodeType":"116","messageId":"117","endLine":2,"endColumn":26},{"ruleId":"114","severity":1,"message":"147","line":3,"column":15,"nodeType":"116","messageId":"117","endLine":3,"endColumn":23},{"ruleId":"114","severity":1,"message":"140","line":29,"column":12,"nodeType":"116","messageId":"117","endLine":29,"endColumn":15},{"ruleId":"114","severity":1,"message":"148","line":29,"column":17,"nodeType":"116","messageId":"117","endLine":29,"endColumn":23},{"ruleId":"131","severity":1,"message":"149","line":130,"column":7,"nodeType":"133","endLine":130,"endColumn":9,"suggestions":"150"},{"ruleId":"114","severity":1,"message":"151","line":2,"column":15,"nodeType":"116","messageId":"117","endLine":2,"endColumn":24},{"ruleId":"114","severity":1,"message":"152","line":2,"column":26,"nodeType":"116","messageId":"117","endLine":2,"endColumn":29},{"ruleId":"114","severity":1,"message":"153","line":2,"column":31,"nodeType":"116","messageId":"117","endLine":2,"endColumn":34},{"ruleId":"114","severity":1,"message":"125","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"125","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"154","line":3,"column":18,"nodeType":"116","messageId":"117","endLine":3,"endColumn":32},{"ruleId":"114","severity":1,"message":"155","line":3,"column":34,"nodeType":"116","messageId":"117","endLine":3,"endColumn":41},{"ruleId":"114","severity":1,"message":"147","line":4,"column":15,"nodeType":"116","messageId":"117","endLine":4,"endColumn":23},{"ruleId":"114","severity":1,"message":"156","line":17,"column":12,"nodeType":"116","messageId":"117","endLine":17,"endColumn":23},{"ruleId":"131","severity":1,"message":"149","line":102,"column":10,"nodeType":"133","endLine":102,"endColumn":12,"suggestions":"157"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["158"],"no-negated-in-lhs",["159"],"'Link' is defined but never used.","'BrowserRouter' is defined but never used.","'Switch' is defined but never used.","'Component' is defined but never used.","'time' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'values.series'. Either include it or remove the dependency array.","ArrayExpression",["160"],"'randomNumber' is defined but never used.","'test' is assigned a value but never used.","'setTest' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'obj' is assigned a value but never used.","'Router' is defined but never used.","'Route' is defined but never used.","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.",["161"],"'zIndex' is defined but never used.","'userEvent' is defined but never used.","'otherApp' is defined but never used.","'setObj' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentDevice'. Either include it or remove the dependency array.",["162"],"'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'accountType' is assigned a value but never used.",["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"168","fix":"170"},"Update the dependencies array to be: [values.series]",{"range":"171","text":"172"},"Update the dependencies array to be: [authListener]",{"range":"173","text":"174"},"Update the dependencies array to be: [currentDevice]",{"range":"175","text":"176"},{"range":"177","text":"176"},[3410,3412],"[values.series]",[2362,2364],"[authListener]",[3065,3067],"[currentDevice]",[2627,2629]]